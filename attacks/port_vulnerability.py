import logging
from generic_attack import *
import nmap
import logging
log = logging.getLogger(__name__)


class PortVulnerabilityTest(GenericAttack):
    """ARP spoofing class
    """

    def __init__(self, attackName, attackConfig, deviceConfig):
        super(PortVulnerabilityTest, self).__init__(attackName, attackConfig, deviceConfig)


    def initialize(self, result):
        self.running = True
        nm = nmap.PortScanner()
        # nm.scan(self.device["ip"], '0-65535', arguments='-sS -sU')
        nm.scan(self.device["ip"], self.config["port_range"], arguments='-sS -sU')
        log.info(nm.command_line())
        for host in nm.all_hosts():
            # print('----------------------------------------------------')
            # print('Host : %s (%s)' % (host, nm[host].hostname()))
            # print('State : %s' % nm[host].state())
            for proto in nm[host].all_protocols():
                # print('----------')
                # print('Protocol : %s' % proto)
                lport = nm[host][proto].keys()
                lport.sort()
                proto_ports_open = []
                proto_ports_filtered = []
                for port in lport:
                    if(nm[host][proto][port]['state'] == "open"):
                        proto_ports_open.append(port)
                    elif (nm[host][proto][port]['state'] == "open|filtered"):
                        proto_ports_filtered.append(port)
                    # print ('port : %s\tstate : %s' % (port, nm[host][proto][port]['state']))

                result.update({proto: {"open":proto_ports_open, "filtered":proto_ports_filtered}})
        if self.running:
            self.device.update({"vulnerable_ports": result})

        self.shutdown();
        return

    def shutdown(self):
        self.running = False
        return True

